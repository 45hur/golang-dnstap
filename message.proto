package dnstap;

// dnstap: flexible, structured event logging for DNS servers

// This file contains the protobuf schemas for the dnstap "Message" payload,
// which carries wire-format (RFC 1035 section 4) DNS messages along with
// metadata.

// There are currently six subtypes of "Message" defined (see the MessageType
// enum below), corresponding to the four arrows in the following diagram,
// slightly modified from RFC 1035 section 2:

//    +---------+ recursive     +----------+           +--------+
//    |         | queries       |          |queries    |        |
//    | Stub    |-------------->| Recursive|---------->| Auth.  |
//    | Resolver|               | Server   |           | Name   |
//    |         |<--------------|          |<----------| Server |
//    +---------+ responses     |          |responses  |        |
//                              +----------+           +--------+
//                              |  Central |
//                              |   cache  |
//                              +----------+

// Two of the arrows, the "queries" and "responses" between the recursive
// server and the authoritative name server, have two MessageType values each,
// one for each "end" of each arrow, because these are considered to be
// distinct events.

// MessageType: the type of DNS message encapsulated in a Message payload
enum MessageType {
    AUTH_QUERY = 0;
    // An AUTH_QUERY is a DNS query message received from a recursive server
    // by an authoritative name server, from the perspective of the
    // authorative name server.

    AUTH_RESPONSE = 1;
    // An AUTH_RESPONSE is a DNS response message sent from an authoritative
    // name server to a recursive server, from the perspective of the
    // authoritative name server.

    RESOLVER_QUERY = 2;
    // A RESOLVER_QUERY is a DNS query message sent from a recursive server to
    // an authoritative name server, from the perspective of the recursive
    // server.

    RESOLVER_RESPONSE = 3;
    // A RESOLVER_RESPONSE is a DNS response message received from an
    // authoritative name server by a recursive server, from the perspective
    // of the recursive server.

    CLIENT_QUERY = 4;
    // A CLIENT_QUERY is a DNS query message sent from a client to a recursive
    // server. A client is a stub resolver or forwarder or some other type of
    // software which sets the RD (recursion desired) bit when querying a
    // recursive server.

    CLIENT_RESPONSE = 5;
    // A CLIENT_RESPONSE is a DNS response message sent from a recursive
    // server to a client.
}

// SocketFamily: the protocol family of the socket that a DNS message was
// sent or received over.
enum SocketFamily {
    INET = 0;   // IPv4 (RFC 791)
    INET6 = 1;  // IPv6 (RFC 2460)
}

// SocketProtocol: the transport protocol of the socket that a DNS message was
// sent or received over.
enum SocketProtocol {
    UDP = 0;    // User Datagram Protocol (RFC 768)
    TCP = 1;    // Transmission Control Protocol (RFC 793)
}

// Message: a DNS message and associated metadata. A Message encodes one of
// the MessageTypes described above and has different requirements based on
// the MessageType, described below.
message Message {
    required MessageType        type = 1;
    // One of the MessageType values described above.

    required SocketFamily       socket_family = 2;
    // One of the SocketFamily values described above.

    required SocketProtocol     socket_protocol = 3;
    // One of the SocketProtocol values described above.

    required bytes              query_address = 4;
    // The network address of the message initiator.
    // This is either a 4-octet IPv4 address or a 16-octet IPv6 address.

    required bytes              response_address = 5;
    // The network address of the message responder.
    // This is either a 4-octet IPv4 address or a 16-octet IPv6 address.

    required uint32             query_port = 6;
    // The transport port of the message initiator.
    // This is a 16-bit UDP or TCP port number.

    required uint32             response_port = 7;
    // The transport port of the message responder.
    // This is a 16-bit UDP or TCP port number.

    required uint32             message_id = 8;
    // The DNS message ID of the query and/or response message.
    // This is a 16-bit number.

    required bytes              query_name = 9;
    // The wire-format DNS query name.

    required uint32             query_type = 10;
    // The DNS query type.

    required uint32             query_class = 11;
    // The DNS query class.

    optional fixed64            query_time = 12;
    // The time at which the DNS query message was sent or received.
    // This is the number of microseconds since the UNIX epoch.

    optional bytes              query_message = 13;
    // The initiator's original wire-format DNS query message.

    optional bytes              query_bailiwick = 14;
    // The initiator's "bailiwick" pertaining to the DNS query message.

    optional fixed64            response_time = 15;
    // The time at which the DNS response message was sent or received.
    // This is the number of microseconds since the UNIX epoch.

    optional bytes              response_message = 16;
    // The responder's original wire-format DNS response message.
}

// Technically, the protobuf Message schema above only strictly requires the
// first 11 fields, and a valid Message payload could conceivably contain only
// those required fields. However, a "dnstap" Message payload also fulfills
// the following requirements, based on the MessageType value:

// AUTH_QUERY:
//      query_message MUST be present
//      query_time MUST be present

// AUTH_RESPONSE:
//      query_time MAY be present
//      response_message MUST be present
//      response_time MUST be present

// RESOLVER_QUERY:
//      query_bailiwick MUST be present
//      query_message MUST be present
//      query_time MUST be present

// RESOLVER_RESPONSE:
//      query_bailiwick MUST be present
//      query_time MAY be present
//      response_message MUST be present
//      response_time MUST be present

// CLIENT_QUERY:
//      query_message MUST be present
//      query_time MUST be present

// CLIENT_RESPONSE:
//      query_time MAY be present
//      response_message MUST be present
//      response_time MUST be present
